/// <reference types="express-session" />
/// <reference types="integer" />
import sqlite = require("better-sqlite3");
declare type RawRowsColumnsReturn = {
    rows: object[];
    columns: sqlite.ColumnDefinition[];
};
declare function getRawRowsColumns(sql: string, params: any[]): RawRowsColumnsReturn;
declare const licencesDB: {
    getRawRowsColumns: typeof getRawRowsColumns;
    getLocations: (reqBodyOrParamsObj: {}, reqSession: Express.SessionData) => any[];
    getLocation: (locationID: number, reqSession: Express.SessionData) => any;
    createLocation: (reqBody: any, reqSession: Express.SessionData) => import("integer").IntLike;
    updateLocation: (reqBody: any, reqSession: Express.SessionData) => number;
    deleteLocation: (locationID: number, reqSession: Express.SessionData) => number;
    restoreLocation: (locationID: number, reqSession: Express.SessionData) => number;
    mergeLocations: (targetLocationID: number, sourceLocationID: number, reqSession: Express.SessionData) => boolean;
    getOrganizations: (reqBody: any, useLimit: any, reqSession: Express.SessionData) => any[];
    getOrganization: (organizationID: number, reqSession: Express.SessionData) => any;
    createOrganization: (reqBody: any, reqSession: Express.SessionData) => import("integer").IntLike;
    updateOrganization: (reqBody: any, reqSession: Express.SessionData) => number;
    deleteOrganization: (organizationID: number, reqSession: Express.SessionData) => number;
    restoreOrganization: (organizationID: number, reqSession: Express.SessionData) => number;
    getInactiveOrganizations: (inactiveYears: number) => any[];
    addOrganizationRepresentative: (organizationID: number, reqBody: any) => {
        organizationID: number;
        representativeIndex: any;
        representativeName: any;
        representativeTitle: any;
        representativeAddress1: any;
        representativeAddress2: any;
        representativeCity: any;
        representativeProvince: any;
        representativePostalCode: any;
        representativePhoneNumber: any;
        representativeEmailAddress: any;
        isDefault: number;
    };
    updateOrganizationRepresentative: (organizationID: number, reqBody: any) => {
        organizationID: number;
        representativeIndex: any;
        representativeName: any;
        representativeTitle: any;
        representativeAddress1: any;
        representativeAddress2: any;
        representativeCity: any;
        representativeProvince: any;
        representativePostalCode: any;
        representativePhoneNumber: any;
        representativeEmailAddress: any;
        isDefault: number;
    };
    deleteOrganizationRepresentative: (organizationID: number, representativeIndex: number) => boolean;
    setDefaultOrganizationRepresentative: (organizationID: number, representativeIndex: number) => boolean;
    getOrganizationRemarks: (organizationID: number, reqSession: Express.SessionData) => any[];
    getOrganizationRemark: (organizationID: number, remarkIndex: number, reqSession: Express.SessionData) => any;
    addOrganizationRemark: (reqBody: any, reqSession: Express.SessionData) => any;
    updateOrganizationRemark: (reqBody: any, reqSession: Express.SessionData) => number;
    deleteOrganizationRemark: (organizationID: number, remarkIndex: number, reqSession: Express.SessionData) => number;
    getLicenceTableStats: () => {};
    getLicences: (reqBodyOrParamsObj: any, includeOrganization: boolean, useLimit: boolean, reqSession: Express.SessionData) => any[];
    getLicence: (licenceID: number, reqSession: Express.SessionData) => any;
    getNextExternalLicenceNumberFromRange: () => any;
    createLicence: (reqBody: any, reqSession: Express.SessionData) => import("integer").IntLike;
    updateLicence: (reqBody: any, reqSession: Express.SessionData) => number;
    deleteLicence: (licenceID: number, reqSession: Express.SessionData) => number;
    getDistinctTermsConditions: (organizationID: number) => any[];
    pokeLicence: (licenceID: number, reqSession: Express.SessionData) => number;
    issueLicence: (reqBody: any, reqSession: Express.SessionData) => number;
    unissueLicence: (licenceID: number, reqSession: Express.SessionData) => number;
    getLicenceTypeSummary: (reqBody: any) => any[];
    addTransaction: (reqBody: any, reqSession: Express.SessionData) => any;
    voidTransaction: (licenceID: number, transactionIndex: number, reqSession: Express.SessionData) => number;
    getEventTableStats: () => {};
    getEvents: (year: number, month: number, reqSession: Express.SessionData) => any[];
    getOutstandingEvents: (reqBody: any, reqSession: Express.SessionData) => any[];
    getEventFinancialSummary: (reqBody: any) => any[];
    getEvent: (licenceID: number, eventDate: number, reqSession: Express.SessionData) => any;
    updateEvent: (reqBody: any, reqSession: Express.SessionData) => number;
    deleteEvent: (licenceID: number, eventDate: number, reqSession: Express.SessionData) => number;
    pokeEvent: (licenceID: number, eventDate: number, reqSession: Express.SessionData) => number;
    getApplicationSettings: () => any[];
    getApplicationSetting: (settingKey: string) => any;
    updateApplicationSetting: (settingKey: string, settingValue: string, reqSession: Express.SessionData) => number;
};
export = licencesDB;
