/// <reference types="express-session" />
import * as llm from "./llmTypes";
export declare function getRawRowsColumns(sql: string, params: any[]): llm.RawRowsColumnsReturn;
export declare function getLocations(reqBodyOrParamsObj: any, reqSession: Express.SessionData): llm.Location[];
export declare function getLocation(locationID: number, reqSession: Express.SessionData): llm.Location;
export declare function createLocation(reqBody: any, reqSession: Express.SessionData): number;
export declare function updateLocation(reqBody: any, reqSession: Express.SessionData): boolean;
export declare function deleteLocation(locationID: number, reqSession: Express.SessionData): boolean;
export declare function restoreLocation(locationID: number, reqSession: Express.SessionData): boolean;
export declare function mergeLocations(targetLocationID: number, sourceLocationID: number, reqSession: Express.SessionData): boolean;
export declare function getOrganizations(reqBody: any, useLimit: boolean, reqSession: Express.SessionData): llm.Organization[];
export declare function getOrganization(organizationID: number, reqSession: Express.SessionData): llm.Organization;
export declare function createOrganization(reqBody: any, reqSession: Express.SessionData): number;
export declare function updateOrganization(reqBody: any, reqSession: Express.SessionData): boolean;
export declare function deleteOrganization(organizationID: number, reqSession: Express.SessionData): boolean;
export declare function restoreOrganization(organizationID: number, reqSession: Express.SessionData): boolean;
export declare function getInactiveOrganizations(inactiveYears: number): llm.Organization[];
export declare function addOrganizationRepresentative(organizationID: number, reqBody: any): llm.OrganizationRepresentative;
export declare function updateOrganizationRepresentative(organizationID: number, reqBody: any): llm.OrganizationRepresentative;
export declare function deleteOrganizationRepresentative(organizationID: number, representativeIndex: number): boolean;
export declare function setDefaultOrganizationRepresentative(organizationID: number, representativeIndex: number): boolean;
export declare function getOrganizationRemarks(organizationID: number, reqSession: Express.SessionData): llm.OrganizationRemark[];
export declare function getOrganizationRemark(organizationID: number, remarkIndex: number, reqSession: Express.SessionData): llm.OrganizationRemark;
export declare function addOrganizationRemark(reqBody: any, reqSession: Express.SessionData): number;
export declare function updateOrganizationRemark(reqBody: any, reqSession: Express.SessionData): boolean;
export declare function deleteOrganizationRemark(organizationID: number, remarkIndex: number, reqSession: Express.SessionData): boolean;
export declare function getOrganizationBankRecords(organizationID: number): llm.OrganizationBankRecord[];
export declare function getLicenceTableStats(): llm.LotteryLicenceStats;
export declare function getLicences(reqBodyOrParamsObj: any, includeOrganization: boolean, useLimit: boolean, reqSession: Express.SessionData): llm.LotteryLicence[];
export declare function getLicence(licenceID: number, reqSession: Express.SessionData): llm.LotteryLicence;
export declare function getNextExternalLicenceNumberFromRange(): number;
export declare function createLicence(reqBody: any, reqSession: Express.SessionData): number;
export declare function updateLicence(reqBody: any, reqSession: Express.SessionData): boolean;
export declare function deleteLicence(licenceID: number, reqSession: Express.SessionData): boolean;
export declare function getDistinctTermsConditions(organizationID: number): any[];
export declare function pokeLicence(licenceID: number, reqSession: Express.SessionData): number;
export declare function issueLicence(reqBody: any, reqSession: Express.SessionData): number;
export declare function unissueLicence(licenceID: number, reqSession: Express.SessionData): number;
export declare function getLicenceTypeSummary(reqBody: any): any[];
export declare function addTransaction(reqBody: any, reqSession: Express.SessionData): number;
export declare function voidTransaction(licenceID: number, transactionIndex: number, reqSession: Express.SessionData): number;
export declare function getEventTableStats(): llm.LotteryEventStats;
export declare function getEvents(year: number, month: number, reqSession: Express.SessionData): llm.LotteryEvent[];
export declare function getOutstandingEvents(reqBody: any, reqSession: Express.SessionData): llm.LotteryEvent[];
export declare function getEventFinancialSummary(reqBody: any): any[];
export declare function getEvent(licenceID: number, eventDate: number, reqSession: Express.SessionData): llm.LotteryEvent;
export declare function updateEvent(reqBody: any, reqSession: Express.SessionData): number;
export declare function deleteEvent(licenceID: number, eventDate: number, reqSession: Express.SessionData): number;
export declare function pokeEvent(licenceID: number, eventDate: number, reqSession: Express.SessionData): number;
export declare function getApplicationSettings(): any[];
export declare function getApplicationSetting(settingKey: string): string;
export declare function updateApplicationSetting(settingKey: string, settingValue: string, reqSession: Express.SessionData): number;
